@page
@model RagDemo.WebApp.Pages.EchoLeakTesterModel
@{
    ViewData["Title"] = "EchoLeak Vulnerability Tester";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1 class="text-danger border-bottom border-danger pb-2 mb-4">
                ⚠️ EchoLeak Vulnerability Tester
            </h1>

            <div class="alert alert-warning" role="alert">
                <strong>Security Demonstration:</strong> This tool demonstrates the EchoLeak vulnerability in RAG
                systems
                where sensitive information can be exposed through semantic search queries. The results will include
                markdown rendering to test image loading from external sites.
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-6">
            <div class="card">
                <div class="card-header">
                    <h3>How to Test</h3>
                </div>
                <div class="card-body">
                    <ol>
                        <li>First, run the <strong>IndexDocuments</strong> function to index all documents (including
                            sensitive ones)</li>
                        <li>Enter a query below that might retrieve sensitive content</li>
                        <li>Watch the browser's network tab or webhook.site dashboard to see if images are loaded from
                            external sites</li>
                        <li>Check if sensitive information is exposed in the results</li>
                    </ol>

                    <div class="mt-3">
                        <button type="button" class="btn btn-secondary" onclick="indexDocuments()">
                            Index Documents First
                        </button>
                        <div id="indexStatus" class="mt-2"></div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-lg-6">
            <div class="card">
                <div class="card-header">
                    <h3>Test Query</h3>
                </div>
                <div class="card-body">
                    <form method="post">
                        <div class="mb-3">
                            <label for="query" class="form-label"><strong>Enter your query:</strong></label>
                            <input type="text" class="form-control" id="query" name="query" asp-for="Query"
                                placeholder="e.g., AWS credentials, webhook site, test image" required>
                        </div>
                        <button type="submit" class="btn btn-danger">Test EchoLeak Vulnerability</button>
                    </form>

                    <div class="mt-3">
                        <h4>Example Dangerous Queries:</h4>
                        <div class="d-flex flex-wrap gap-2">
                            <button type="button" class="btn btn-outline-info btn-sm"
                                onclick="setQuery(this.textContent)">security team contact information</button>
                            <button type="button" class="btn btn-outline-info btn-sm"
                                onclick="setQuery(this.textContent)">how do I reset my GitHub token</button>
                            <button type="button" class="btn btn-outline-info btn-sm"
                                onclick="setQuery(this.textContent)">weekly security updates</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (Model.Result != null)
    {
        <div class="row mt-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h2>EchoLeak Test Results</h2>
                        <p class="mb-0"><strong>Query:</strong> @Model.Result.Query</p>
                    </div>
                    <div class="card-body">
                        @if (Model.Result.FoundSensitiveContent)
                        {
                            <div class="alert alert-danger" role="alert">
                                <strong>⚠️ VULNERABILITY DETECTED:</strong> Sensitive content found in search results!
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-success" role="alert">
                                <strong>✅ No sensitive content detected</strong> in the search results.
                            </div>
                        }

                        <h3>Search Results (@Model.Result.Results.Count found)</h3>

                        @foreach (var item in Model.Result.Results)
                        {
                            <div class="card mt-3 @(item.ContainsSensitiveContent ? "border-danger" : "")">
                                <div class="card-header @(item.ContainsSensitiveContent ? "bg-danger text-white" : "")">
                                    <h4 class="mb-0">@item.Title</h4>
                                    <small>Relevance Score: @item.Score.ToString("F3")</small>
                                    @if (item.ContainsSensitiveContent)
                                    {
                                        <div><strong>⚠️ Contains Sensitive Content</strong></div>
                                    }
                                </div>
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-md-6">
                                            <h5>Raw Content:</h5>
                                            <pre class="bg-light p-3 rounded"><code>@item.Content</code></pre>
                                        </div>
                                        <div class="col-md-6">
                                            <h5>Rendered Markdown <span class="text-warning">(⚠️ Check Network Tab for External
                                                    Requests)</span>:</h5>
                                            <div class="border p-3 rounded">
                                                @Html.Raw(item.RenderedMarkdown)
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }

    <div class="row mt-4">
        <div class="col-12">
            <div class="alert alert-info" role="alert">
                <strong>Webhook Testing:</strong> If you have a webhook.site URL, replace the URLs in the test documents
                with your own webhook.site ID to monitor external requests when images are rendered.
            </div>
        </div>
    </div>
</div>

<script>
    function setQuery(query) {
        document.getElementById('query').value = query;
    }

    async function indexDocuments() {
        const statusDiv = document.getElementById('indexStatus');
        statusDiv.innerHTML = '<div class="spinner-border spinner-border-sm" role="status"></div> Indexing documents...';

        try {
            const response = await fetch('/EchoLeakTester?handler=IndexDocuments', {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                }
            });

            if (response.ok) {
                const result = await response.text();
                statusDiv.innerHTML = '<div class="alert alert-success">Documents indexed successfully!</div>';
            } else {
                throw new Error('Indexing failed');
            }
        } catch (error) {
            statusDiv.innerHTML = '<div class="alert alert-danger">Error indexing documents: ' + error.message + '</div>';
        }
    }
</script>

<style>
    .btn-sm {
        font-size: 0.75rem;
    }

    pre {
        max-height: 200px;
        overflow-y: auto;
    }

    .border-danger {
        border-color: #dc3545 !important;
    }

    .bg-danger {
        background-color: #dc3545 !important;
    }
</style>
